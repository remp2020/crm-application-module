<?php

namespace Crm\ApplicationModule;

use Crm\ApplicationModule\Commands\DumpSchemaForTests;
use Phinx\Config\Config;
use Symfony\Component\Console\Application;
use Phinx\Console\Command\Init;
use Phinx\Console\Command\Create;
use Phinx\Console\Command\Migrate;
use Phinx\Console\Command\Rollback;
use Phinx\Console\Command\Status;
use Phinx\Console\Command\Test;

class PhinxRegistrator
{
    /** @var array                  Define phinx commands with aliases */
    private $command = [
        Init::class => 'phinx:init',
        Create::class => 'phinx:create',
        Migrate::class => 'phinx:migrate',
        Rollback::class => 'phinx:rollback',
        Status::class => 'phinx:status',
        Test::class => 'phinx:test',
    ];

    private $moduleManager;

    /**
     * @param Application $application
     */
    public function __construct(
        Application $application,
        ModuleManager $moduleManager
    ) {
        $this->moduleManager = $moduleManager;
        $config = new Config($this->buildConfig(), __FILE__);

        // Register all commands
        foreach ($this->command as $class => $commandName) {
            $command = new $class;
            $command->setName($commandName);
            if (is_callable([$command, 'setConfig'])) {
                $command->setConfig($config);
            }
            $application->add($command);
        }

        // Ability to dump whole sql schema into single migration for speeding-up tests
        $dumpSchema = new DumpSchemaForTests();
        $dumpSchema->setName('phinx:dump-for-tests');
        $dumpSchema->setDescription('Dumps whole DB schema into single phinx migration file for tests');
        $dumpSchema->setConfig(new Config($this->buildTestConfig([
            'foreign_keys' => true,
            'mark_generated_migration' => false,
            'schema_file' => '%%PHINX_CONFIG_DIR%%/../../../../tests/migrations/schema.php'
        ]), __FILE__));
        $application->add($dumpSchema);

        // Migrate previously dumped schema (from phinx:dump-for-tests command)
        $testMigrate = new Migrate();
        $testMigrate->setName('phinx:migrate-for-tests');
        $testMigrate->setDescription('Migrates initial migration generated by phinx:dump-for-tests');
        $testMigrate->setConfig(new Config($this->buildTestConfig(), __FILE__));
        $application->add($testMigrate);
    }

    private function buildTestConfig($configsToMerge = []): array
    {
        $env = Core::env('CRM_ENV');

        $configData = [
            'paths' => [
                'migrations' => [
                    APP_ROOT . 'tests/migrations',
                ]
            ],
            'environments' => [
                'default_migration_table' => 'phinxlog',
                'default_database' => $env,
            ],
        ];

        $configData['environments'][$env] = $this->buildDbConfig();
        return array_merge($configData, $configsToMerge);
    }

    private function buildConfig()
    {
        $env = Core::env('CRM_ENV');

        $configData = [
            'paths' => [
                'migrations' => [
                    APP_ROOT . 'migrations',
                ]
            ],
            'environments' => [
                'default_migration_table' => 'phinxlog',
                'default_database' => $env,
            ],
        ];

        foreach ($this->moduleManager->getModules() as $module) {
            $reflector = new \ReflectionClass($module);
            $configData['paths']['migrations'][] = dirname($reflector->getFileName()) . '/migrations';
        }

        $configData['environments'][$env] = $this->buildDbConfig();

        return $configData;
    }

    private function buildDbConfig()
    {
        return [
            'adapter' => Core::env('CRM_DB_ADAPTER'),
            'host' => Core::env('CRM_DB_HOST'),
            'name' => Core::env('CRM_DB_NAME'),
            'user' => Core::env('CRM_DB_USER'),
            'pass' => Core::env('CRM_DB_PASS'),
            'port' => Core::env('CRM_DB_PORT'),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
        ];
    }
}
